
class solution{
public:
    pair <int, int> findnextcell (string CASE , pair <int, int> indices , int n){
        pair <int, int> nextcell;
        if (CASE == "row")
            nextcell = {indices.first , indices.second+1};
        else if (CASE == "column")
            nextcell = {indices.first+1 , indices.second};
        else if (CASE == "diagonal")
            nextcell = {indices.first+1 , indices.second+1};
        else
            nextcell = {indices.first+1 , indices.second-1};
        
        if (nextcell.first<0 || nextcell.first>=n)
            return {-1,-1};
        if (nextcell.second<0 || nextcell.second>=n)
            return {-1,-1};
        return nextcell;
    }
    
    int checkwinner (vector <vector <int>>& table, string CASE , int r , int c, int winner , int n){
        if (table[r][c] == 0) //empty cell
            return 0;
        pair <int, int> nextcell = findnextcell(CASE, {r,c}, n);
        if (nextcell.first == -1) // done checking the whole CASE
            return winner;
        if (table[r][c] != table[nextcell.first][nextcell.second])
            return 0;
        return checkwinner(table, CASE, nextcell.first, nextcell.second, table[r][c], n);
    }

    int findwinner (vector<vector<int>>& table){ // 0 = empty cell , 1 = x , 2 = O
        int winner;
        int n = table.size();
        for (int i=0 ; i<n ; i++){
            winner = checkwinner (table , "row", i , 0 , 0 , n);
            if (winner != 0)
                return winner;
            winner = checkwinner (table , "column", 0 , i , 0 , n);
            if (winner != 0)
                return winner;
        }
        winner = checkwinner (table , "diagonal", 0 , 0 , 0 , n);
        if (winner != 0)
            return winner;
        winner = checkwinner (table , "rdiagonal", 0 , n-1 , 0 , n);
        return winner;
    }
};
