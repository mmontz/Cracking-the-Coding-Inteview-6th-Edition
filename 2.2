
#include <iostream>

using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode (int x){val = x; next = NULL;}
};

struct LinkedList {
    ListNode* head;
    LinkedList (){head = NULL;}
    void addtolist (int x){
        ListNode* newnode = new ListNode (x);
        if (!head){
            head = newnode;
        }
        else{
            newnode->next = head;
            head = newnode;
        }
    }
    void printList(){
        ListNode* cur = head;
        while (cur){
            cout << cur->val << " ";
            cur = cur->next;
        }
        cout << endl;
    }
};



class solution {
public:
    ListNode* KthtoLast (LinkedList* L, int k){
        int counter = 0;
        ListNode* slow = L->head;
        ListNode* fast = L->head;
        
        while (counter < k && fast){
            fast = fast->next;
            counter++;
        }
        
        if (!fast)
            return NULL;
        
        while (fast){
            slow = slow->next;
            fast = fast->next;
        }
        return slow;
    }
    
    
    
    ListNode* KthtoLastRec (ListNode* L ,int k , int &index){
        if (!L)
            return NULL;
        ListNode* rest = KthtoLastRec(L->next, k, index);
        if (rest)
            return rest;
        index++;
        if (index == k)
            return L;
        return NULL;
    }
};



int main(int argc, const char * argv[]) {
    LinkedList *L = new LinkedList();
    int n = 6;
    for (int i=0 ; i<6 ; i++)
        L->addtolist(i);
    L->printList();
    solution s;
    int i = 0;
    cout << s.KthtoLastRec(L->head, 3, i)->val << endl;
    return 0;
}
